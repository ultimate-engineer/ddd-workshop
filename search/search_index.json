{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About this workshop This workshop will unravel DDD into practical actions when developing Java solutions. We'll cover both strategy and tactics: We'll start a solution case from scratch and cover how several concepts, such as bounded context, context maps, and ubiquitous language, can be used efficiently. See why and how these practices can increase the chances of delivering a solution that correctly maps down different business needs and allows us to develop the best implementation strategies to reflect a business problem into a technical solution. While getting our hands dirty in coding, we'll learn patterns such as entity, value object, repository, and aggregator, applied to Java.","title":"About this workshop"},{"location":"#about-this-workshop","text":"This workshop will unravel DDD into practical actions when developing Java solutions. We'll cover both strategy and tactics: We'll start a solution case from scratch and cover how several concepts, such as bounded context, context maps, and ubiquitous language, can be used efficiently. See why and how these practices can increase the chances of delivering a solution that correctly maps down different business needs and allows us to develop the best implementation strategies to reflect a business problem into a technical solution. While getting our hands dirty in coding, we'll learn patterns such as entity, value object, repository, and aggregator, applied to Java.","title":"About this workshop"},{"location":"00_environment/","text":"Preparing your environment Most of the workshop exercises involves usage of tools such as: - Developer IDE (e.g. VSCode, Eclipse, IntelliJ, ...) - Egon.io - CLI tools via terminal Prerequisites Maven CLI; Git CLI; Java 17; An IDE of your preference; Command line (terminal). If using Windows, PowerShell is recommended; REST client tools like cURL or postman (Optional) ; java -version mvn -version git --version To validate your environment, confirm you have as an output of the commands above working: $ java -version openjdk version \"17.0.6\" 2023 -01-17 OpenJDK Runtime Environment Temurin-17.0.6+10 ( build 17 .0.6+10 ) OpenJDK 64 -Bit Server VM Temurin-17.0.6+10 ( build 17 .0.6+10, mixed mode ) $ mvn -version Apache Maven 3 .9.0 ( 9b58d2bad23a66be161c4664ef21ce219c2c8584 ) Maven home: /opt/homebrew/Cellar/maven/3.9.0/libexec Java version: 19 .0.2, vendor: Homebrew, runtime: /opt/homebrew/Cellar/openjdk/19.0.2/libexec/openjdk.jdk/Contents/Home Default locale: en_BR, platform encoding: UTF-8 OS name: \"mac os x\" , version: \"13.0.1\" , arch: \"aarch64\" , family: \"mac\" $ git --version git version 2 .37.1 ( Apple Git-137.1 ) Prepare your working directory To get started with the labs, first you need to clone the projects used in the exercises and have it available in your local development environment. Info The guided exercises are built on top of quickstart projects, a foundation set of preconfigured projects. To get the foundation projects and build them, execute: git clone https://github.com/ultimate-engineer/ddd-workshop-labs cd ddd-workshop-labs mvn clean package The build and packaging should complete successfully. Using Egon for Domain Modeling In this workshop, you will use Egon.io to model the domain and its elements throughout the exercises. Throughout the exercises, you will handle different use cases in different domains. Each domain is represented in a different diagram. During the exercises, you'll be instructed to import the respective diagram files in Egon. The file ends with . dst extension, and once imported, you'll have in Egon preconfigured diagram with icons and elements settings. (Optional) Extra icons and configurations The workshop uses extra icons not available by default in the tool. In case you want to add extra icons or change the icon's type (e.g. from Actor to WorkObject ) you can do that in the tool's settings. See details below: Using your browser, navigate to https://egon.io/app/ In the top-right corner, click on the Settings icon; Now, you can upload the icons of our domain: Click on the \"Upload Custom Icons\" button; Locate the ddd-workshop-labs project you have cloned on the previous step. Select and upload your custom icon, or all icons located in the directory: ddd-workshop-labs/storytelling/icons Now, upload the icons settings. Each icon can be configured to be used as an actor or a work object . These settings are already configured for you. Click on the \"import icon configuration\" icon: Save your configurations.","title":"Preparing your environment"},{"location":"00_environment/#preparing-your-environment","text":"Most of the workshop exercises involves usage of tools such as: - Developer IDE (e.g. VSCode, Eclipse, IntelliJ, ...) - Egon.io - CLI tools via terminal","title":"Preparing your environment"},{"location":"00_environment/#prerequisites","text":"Maven CLI; Git CLI; Java 17; An IDE of your preference; Command line (terminal). If using Windows, PowerShell is recommended; REST client tools like cURL or postman (Optional) ; java -version mvn -version git --version To validate your environment, confirm you have as an output of the commands above working: $ java -version openjdk version \"17.0.6\" 2023 -01-17 OpenJDK Runtime Environment Temurin-17.0.6+10 ( build 17 .0.6+10 ) OpenJDK 64 -Bit Server VM Temurin-17.0.6+10 ( build 17 .0.6+10, mixed mode ) $ mvn -version Apache Maven 3 .9.0 ( 9b58d2bad23a66be161c4664ef21ce219c2c8584 ) Maven home: /opt/homebrew/Cellar/maven/3.9.0/libexec Java version: 19 .0.2, vendor: Homebrew, runtime: /opt/homebrew/Cellar/openjdk/19.0.2/libexec/openjdk.jdk/Contents/Home Default locale: en_BR, platform encoding: UTF-8 OS name: \"mac os x\" , version: \"13.0.1\" , arch: \"aarch64\" , family: \"mac\" $ git --version git version 2 .37.1 ( Apple Git-137.1 )","title":"Prerequisites"},{"location":"00_environment/#prepare-your-working-directory","text":"To get started with the labs, first you need to clone the projects used in the exercises and have it available in your local development environment. Info The guided exercises are built on top of quickstart projects, a foundation set of preconfigured projects. To get the foundation projects and build them, execute: git clone https://github.com/ultimate-engineer/ddd-workshop-labs cd ddd-workshop-labs mvn clean package The build and packaging should complete successfully.","title":"Prepare your working directory"},{"location":"00_environment/#using-egon-for-domain-modeling","text":"In this workshop, you will use Egon.io to model the domain and its elements throughout the exercises. Throughout the exercises, you will handle different use cases in different domains. Each domain is represented in a different diagram. During the exercises, you'll be instructed to import the respective diagram files in Egon. The file ends with . dst extension, and once imported, you'll have in Egon preconfigured diagram with icons and elements settings.","title":"Using Egon for Domain Modeling"},{"location":"00_environment/#optional-extra-icons-and-configurations","text":"The workshop uses extra icons not available by default in the tool. In case you want to add extra icons or change the icon's type (e.g. from Actor to WorkObject ) you can do that in the tool's settings. See details below: Using your browser, navigate to https://egon.io/app/ In the top-right corner, click on the Settings icon; Now, you can upload the icons of our domain: Click on the \"Upload Custom Icons\" button; Locate the ddd-workshop-labs project you have cloned on the previous step. Select and upload your custom icon, or all icons located in the directory: ddd-workshop-labs/storytelling/icons Now, upload the icons settings. Each icon can be configured to be used as an actor or a work object . These settings are already configured for you. Click on the \"import icon configuration\" icon: Save your configurations.","title":"(Optional) Extra icons and configurations"},{"location":"action-one/","text":"Action 1: Bookstore In this exercise you can validate and practice your knowledge of the following concepts: WIP Scenario WIP Goals WIP If you can successfully execute the above items, it means you accomplished all this challenge goals! Congratulations!","title":"Action 1: Bookstore"},{"location":"action-one/#action-1-bookstore","text":"In this exercise you can validate and practice your knowledge of the following concepts: WIP","title":"Action 1: Bookstore"},{"location":"action-one/#scenario","text":"WIP","title":"Scenario"},{"location":"action-one/#goals","text":"WIP If you can successfully execute the above items, it means you accomplished all this challenge goals! Congratulations!","title":"Goals"}]}